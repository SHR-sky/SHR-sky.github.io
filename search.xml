<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CP0：C语言环境的配置</title>
    <url>/2024/09/09/CP0%EF%BC%9AC%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>这是一篇安装配置C&#x2F;C++环境的教程。</p>
<h2 id="一、VScode-下载安装"><a href="#一、VScode-下载安装" class="headerlink" title="一、VScode 下载安装"></a>一、VScode 下载安装</h2><p>软件下载地址： <a href="https://code.visualstudio.com/Download">点击这里</a><br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/6cb9f4807d3eb5c1a30e83c43c5df6dc.png" alt="各个系统平台自行选择"></p>
<p><strong>安装步骤如下</strong><br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/e899efc8a6510d3a801739a12a0391d9.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/b0f30a8c7992e60fedfe7bc47c25fab6.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/5067616eeda02d9c0964669a60f44f0f.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/b757a930461d90540e56731a22b99986.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/545ae11dd9de2d968bf73facd9100f1d.png"></p>
<h2 id="二、MinGW-w64-下载"><a href="#二、MinGW-w64-下载" class="headerlink" title="二、MinGW-w64 下载"></a>二、MinGW-w64 下载</h2><p>可自行选择<strong>下载器</strong>或者<strong>资源包</strong>（下载器的话网络原因容易出错，建议直接选择资源包下载）</p>
<p><em>资源下载地址链接：</em> <a href="https://sourceforge.net/projects/mingw-w64/files/">点击这里</a></p>
<p>链接网站初始界面如下：<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/image-20240909230425011.png" alt="image-20240909230425011"></p>
<p>从当前窗口滚轮下滑：<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/e2fa7231cf16ee4d3a841aaa0c9a2eb9.png"></p>
<h3 id="资源包解压缩"><a href="#资源包解压缩" class="headerlink" title="资源包解压缩"></a>资源包解压缩</h3><p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/30eca8bce3b609d50e7b5c8fd50af07d.png"><br><em>解压缩路径自行设置</em> <strong>bin</strong>文件夹即为目标路径</p>
<h3 id="添加系统变量"><a href="#添加系统变量" class="headerlink" title="添加系统变量"></a>添加系统变量</h3><p>1、找到 <strong>此电脑</strong>，点击 <strong>系统属性</strong><br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/aa6829550e437957f621ccf7c409c2e8.png"></p>
<p>2、选择 <strong>高级系统设置</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/334b248571fb49b094dc302f1a4e5ab7.png"></p>
<p>3、<strong>系统属性</strong> - <strong>高级</strong> - <strong>环境变量</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/beb3a3b72fdc8ebb233ad24d9c6035b4.png"></p>
<p>4、<strong>系统变量 - Path - 编辑</strong><br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/b5d9963e97a908ea8ff5b44201b42781.png"></p>
<p>5、选择 <strong>浏览</strong> 找到先前下载的、解压缩后的 <strong>MinGW-w64文件资源包</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/db65957ddff7a6b316d635ce177aaa7f.png"></p>
<p>6、选中<strong>bin</strong>文件夹，逐步点击确定即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/578e46f41c9cf7597625b0c8bcfbbe25.png"></p>
<h2 id="三、编译环境配置"><a href="#三、编译环境配置" class="headerlink" title="三、编译环境配置"></a>三、编译环境配置</h2><h3 id="配置编译器"><a href="#配置编译器" class="headerlink" title="配置编译器"></a>配置编译器</h3><p>1、打开安装好的 <strong>VScode</strong> 软件，设置中文环境（可自行选择）</p>
<p><strong>设置 - 扩展</strong> 搜索框输入 <strong>Chinese</strong> 选择相关插件进行安装即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/327776756a1bf169112d8090a7cea0e3.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/81d51ee1abd9fa83d0a288ab79e51b36.png"></p>
<p>2、继续在搜索框中<em>搜索并安装</em> <strong>C&#x2F;C++扩展</strong> ，新建一个C++代码文件用于后续测试</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/423288290a145d7925e385f4b6a886cd.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/3b233fd31e592c2f3cf27a0cf91efa7e.png"></p>
<p>3、<strong>Ctrl + Shift + P</strong> 调出命令面板，输入 <strong>C&#x2F;C++</strong> ，选择 <strong>Edit Configurations(UI)</strong> 进入 <strong>IntelliSense配置</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/9d35cc11f90f48bcdb5fe33344738053.png"></p>
<p>选中我们添加好的编译器路径 <strong>D:&#x2F;MinGW-w64&#x2F;bin&#x2F;g++.exe</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/a9120160c01ee2dc3827e44600653b92.png"></p>
<p>继续鼠标滚轮下滑窗口，找到 <strong>IntelliSense 模式</strong> 下拉框选择 <strong>gcc-x64</strong> 即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/00c65a2339a361ec050df5ff29e4d0fd.png"></p>
<p>同样 安装一个插件 Code Runner</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/image-20240909224813725.png" alt="image-20240909224813725"></p>
<p>此时，在你要运行的文件下右键，Run Code即可运行代码了</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/image-20240909224922773.png" alt="image-20240909224922773"></p>
<p>此时，文件视图列表会多出一个<strong>c_cpp_properties.json</strong>文件，具体内容如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/d8980f27da83fb50428528c0a01b9948.png"></p>
<p><em>作为一名初学者，到此为止即可，无需继续下去，你的VScode已经可以写代码了</em></p>
<hr>
<p><strong>此后的内容，本质上是通过配置json去实现”设置“的功能</strong></p>
<h3 id="配置构建任务"><a href="#配置构建任务" class="headerlink" title="配置构建任务"></a>配置构建任务</h3><p>1、同样 <strong>Ctrl+Shift+P</strong> 调出命令面板，输入 <strong>tasks</strong> ，选择 <strong>Tasks:Configure Default Build Task</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/941fefadcd1ab7516cddea09db06bf93.png"></p>
<p>2、继续选择 <strong>C&#x2F;C++: g++.exe 生成活动文件</strong>，此时会生成 <strong>hello.exe文件</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/3d305c24ead2fe5e27e3b8d2fe2c8ada.png"></p>
<p>此时，生成一个名为 <strong>tasks.json</strong> 的配置文件，具体内容如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/3924ada60c937d622b088c7e29bf02d5.png"></p>
<h3 id="配置调试设置"><a href="#配置调试设置" class="headerlink" title="配置调试设置"></a>配置调试设置</h3><p>选择 <strong>运行 - 添加配置</strong><br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/0eef68e0959053d3cbe884a5a30d61b1.png"></p>
<p>选择 <strong>C++(GDB&#x2F;LLDB)</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/009270957caf9ad95350cc7788607107.png"></p>
<p>此举会产生一个<strong>launch.json</strong>文件，<em><strong>若文件内容配置为空</strong></em>，点击右下角<strong>添加配置</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/b1374968a9715a5fde76224e877faa1d.png"></p>
<p>然后选择 <strong>C&#x2F;C++: (gdb) 启动</strong> 即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/db937e75753aedb7159d517688a29781.png"></p>
<p><strong>添加配置后</strong> 的内容如下，至此调试环境搭建完成，<strong>文件内容修改</strong> 如下 ：</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/277f1810848aa9cf4e9516677eb95e15.png"></p>
<p>下面我们一起来调试一下： 按住快捷键 <strong>F5</strong> ，进入 <strong>调试</strong> 。（或从顶部工具栏 <strong>运行 - 启动调试</strong>） ，内容输出正确，则配置成功。</p>
<p><em><strong>注意</strong></em>：需确保.exe文件存在，若不存在，可将文件视角切换至<strong>test.cpp</strong>文件编辑器界面，按快捷键 <strong>Ctrl + Shift + B</strong> ，即可创建生成.exe文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/0dd4ffdcad312e10327cd4abe464a8ce.png"></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Dian</tag>
      </tags>
  </entry>
  <entry>
    <title>About me</title>
    <url>/2023/06/29/about/</url>
    <content><![CDATA[<blockquote>
<p>a stduent , a learner</p>
</blockquote>
<p>也许你认识我？(●’◡’●)</p>
<p>既然到了这里，不如听听我准备的音乐，看看这些图片，玩一玩那些网站。</p>
<p>还有这里的文章都很有意思哦！:D</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>CP1：STM32——HAL库环境的搭建</title>
    <url>/2024/09/30/CP1%EF%BC%9ASTM32%E2%80%94%E2%80%94HAL%E5%BA%93%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本篇教程是为了通过STI的招新，以及为之后蓝桥杯嵌入式比赛打基础，所以采用单片机信号为STM32G431。</p>
<p>不得不说，虽然很遗憾，但是HAL确实拥有更快的开发速度，更加适用于闭卷比赛。所以，对于蓝桥杯，我更加推荐HAL库进行开发。</p>
<p>但是对于电赛等项目，还是推荐更贴近底层的标准库，期待未来的教程吧，我愿称之为“佳期”。</p>
<blockquote>
<p>以下所有软件安装包，可从R获取</p>
</blockquote>
<h1 id="CubeMX的安装"><a href="#CubeMX的安装" class="headerlink" title="CubeMX的安装"></a>CubeMX的安装</h1><h4 id="Java下载"><a href="#Java下载" class="headerlink" title="Java下载"></a>Java下载</h4><p>    下载地址： <a href="https://www.java.com/zh_CN/download/windows-64bit.jsp%EF%BC%88%E5%B0%BD%E9%87%8F%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88">https://www.java.com/zh_CN/download/windows-64bit.jsp（尽量安装最新版</a> 64 位的Java）<br>    下载方法：</p>
<ol>
<li>打开官网下载地址，点击 <strong>同意并开始免费下载</strong>；<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/b53c9cc23d3c70e02b68a543c3eb3ec7.png" alt="2.1_1"></li>
<li>无需登陆，直接可以下载。</li>
</ol>
<h4 id="CubeMX-官网下载"><a href="#CubeMX-官网下载" class="headerlink" title="CubeMX 官网下载"></a>CubeMX 官网下载</h4><p>    下载地址： <a href="https://www.st.com/stm32cubemx">官网下载地址</a><br>    下载方法： 注册帐号先</p>
<ol>
<li>打开官网下载地址，点击 <strong>获取软件</strong>；<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/34afcbf602ba96bdd03475424b986939.png" alt="2.2_1"></li>
<li>选择对应的版本进行下载。（需要登陆账号，其中 <strong>Linux</strong> 和 <strong>MacOS</strong> 的配置文件和 <strong>Windows</strong> 安装包在同一个文件中）<br><img src="https://i-blog.csdnimg.cn/blog_migrate/70b315c7ba931c74c7d6504f6dbe8a7d.png#pic_center" alt="2.2_2"><br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/327c90dd04b02cce5955c5e726dd095d.png" alt="2.2_3"></li>
</ol>
<h4 id="Java-安装"><a href="#Java-安装" class="headerlink" title="Java 安装"></a>Java 安装</h4><ol>
<li><p>打开 <strong>jre-8u261-windows-x64.exe</strong> 安装包，勾选<strong>更改目标文件夹</strong>，点击 <strong>安装</strong>；<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/dfc127dcabb5c29fe5733da963a8199e.png" alt="3.1_1"></p>
</li>
<li><p>选择合适的安装目录，点击 <strong>下一步</strong>；<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/4c3c94eaef901a57bf38fe505a93f7dc.png" alt="3.1_2"></p>
</li>
<li><p>等待自动安装；<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/80bea839099a614dd5e7e80f89ecb316.png" alt="3.1_3"></p>
</li>
<li><p>安装完毕，点击 <strong>关闭</strong>；<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/739377d532018567ceb8b7dcfffd0f8b.png" alt="3.1_4"></p>
</li>
</ol>
<h4 id="CubeMX-安装"><a href="#CubeMX-安装" class="headerlink" title="CubeMX 安装"></a>CubeMX 安装</h4><ol>
<li><p>打开 <strong>SetupSTM32CubeMX-6.0.0.exe</strong> 文件，如果未安装 Java 环境，将会出现报错；<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/8abfe544b9c1d9df946056773fcaf8e2.png" alt="3.2_0"></p>
</li>
<li><p>安装 <strong>Java</strong> 后，打开 <strong>SetupSTM32CubeMX-6.0.0.exe</strong> 文件，其他系统安装参考 <strong>Readme.html</strong>，点击 <strong>Next</strong>；<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/0002558686e9a947e87ea4b07967909a.png" alt="3.2_1"></p>
</li>
<li><p>勾选 <strong>I accpt</strong>，点击 <strong>Next</strong>；<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/58c1be03f6f1d5fabbf18dad7e1475ce.png" alt="3.2_2"></p>
</li>
<li><p>勾选第一个，点击 <strong>Next</strong>；<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/f8ed354c1c69190a5de61a233a9faf10.png" alt="3.2_3"><br>（第二个勾选表示参加改善用户体验计划，即上传用户日志数据，若勾选安装后，可在软件 Help &gt; User Preferences &gt; General Settings 里取消）</p>
</li>
<li><p>选择合适的安装路径，点击 <strong>Next</strong>；（若路径未创建，会提示路径将被创建）<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/c8730644def3cab5600610e0e1935297.png" alt="3.2_4"></p>
</li>
<li><p>根据需求勾选，点击 <strong>Next</strong>；<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/36eda51dd02a04a2d9ccebbd3cf6ec76.png" alt="3.2_6"></p>
</li>
<li><p>程序自动安装，安装完成后，点击 <strong>Next</strong>；<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/acaf8db1f4972c88e229af02a80a3f69.png" alt="3.2_7"><br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/4be05a0fc8cd2ffcd6621c8a1f585d2b.png" alt="3.2_8"></p>
</li>
<li><p>提示安装成功和一个卸载程序被创建在安装目录的 Uninstaller 文件夹中，点击 <strong>Done</strong>；<br><img src="https://i-blog.csdnimg.cn/blog_migrate/a49eecda56de23237b979226831721aa.png#pic_center" alt="3.2_9"></p>
</li>
<li><p>打开 <strong>STM32CubeMX</strong> 软件；若安装的 <strong>Java</strong> 是 32 位的，将会在每次打开软件时弹窗提醒，只需安装 <strong>Java 64</strong> 位即可消除弹窗；<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/2fb8a407a7d755ae03732d2a8d6b7d3e.png" alt="3.2_11"></p>
</li>
<li><p>软件界面如下。<br><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/728c531dda1b1ea9b8f504048f5a3cb1.png" alt="3.2_12"></p>
</li>
</ol>
<h1 id="Keil5的安装"><a href="#Keil5的安装" class="headerlink" title="Keil5的安装"></a>Keil5的安装</h1><p>略，直接安装包安装即可</p>
<h1 id="初始工程的搭建"><a href="#初始工程的搭建" class="headerlink" title="初始工程的搭建"></a>初始工程的搭建</h1><p>下面点击Help里的这个地方</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/f8717ca9f266ee155f3c8d613901d4bd.png" alt="img"></p>
<p>找到STM32G4选择芯片包进行下载，下载完成后就是像这样一个小黄点。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/35dfab37e6969c41f3c39b4d9fa38df1.png" alt="img"></p>
<p>回到主页面，点击第一个小蓝框就可以进行配置了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/eff82dd6540d9627957707261b09df30.png" alt="img"></p>
<p>选择STM32G431RBT6这款芯片。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/77e447ac63f34fbaf2dd97016d7ef5c1.png" alt="img"></p>
<p>选择完成后就可以进行配置了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/371e1743e614f17250b7751a5db9bb6f.png" alt="img"></p>
<p>同时也要进行一些基础的配置。</p>
<p>选中这里的SYS里的Debug，选择Serial Wire，要是不选的话，过会就没法把程序下载到板子上了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/ad5f2b27aa2f4cdfec0b0752e2c17882.png" alt="img"></p>
<p>这里的RCC选择高速时钟源，选择晶振作为时钟源。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/8a2c9166b403ff21813feec3ebc665fb.png" alt="img"></p>
<p>同时将主频配置为80MHz，只需要配置PLLCLK作为系统时钟，主要是红线部分。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/837958275995dad581f707613bf3bd05.png" alt="img"></p>
<p>上面配置完后，要将这里选择为MDK-ARM.</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/78e63481b7df38a5463aded086b08710.png" alt="img"></p>
<p>在Code Generator这里要将第二部分的第一个给勾上，这个是对配置的每一部分都生成一个.c和.h文件，这样main.c中会比较整洁，不然都在main.c中，显得比较混乱。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/2f85bb801fc888daceb2081be3b268b6.png" alt="img"></p>
<p> <strong>同时，一定要注意，在选择工程路径的时候一定不能创建在中文路径下，不然会报错。</strong></p>
<p>配置完成后，点一下上面的GENERATE CODE就可以生成工程啦</p>
<p>至此，工程环境搭建完毕，下一篇将会介绍Keil的使用。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>STI</tag>
      </tags>
  </entry>
  <entry>
    <title>black_sheep</title>
    <url>/2023/06/29/black-sheep/</url>
    <content><![CDATA[<h2 id="《黑羊》-卡尔维诺"><a href="#《黑羊》-卡尔维诺" class="headerlink" title="《黑羊》 卡尔维诺"></a>《黑羊》 卡尔维诺</h2><p>从前有个国家，里面人人是贼。</p>
<p>一到傍晚，他们手持万能钥匙和遮光灯笼出门，走到邻居家里行窃。破晓时分，他们提着偷来的东西回到家里，总能发现自己家也失窃了。</p>
<p>他们就这样幸福地居住在一起。没有不幸的人，因为每个人都从别人家里偷东西，别人又再从别人家里偷，依次下去，直到最后一个人去第一个窃贼家行窃。该国贸易也就不可避免地是买方和卖方的双向欺骗。该国政府也是个向臣民行窃的犯罪机构，而臣民也仅对欺骗政府感兴趣。所以日子倒也平稳，没有富人和穷人。</p>
<p>有一天——到底是怎么回事没人知道——总之是有个诚实人到了该国定居。到了晚上，他没有携带提灯出门去偷，而是呆在家里抽烟读小说。</p>
<p>贼来了，见灯亮着，就没有进去。</p>
<p>这样持续了有一段时间。该国的人感到有必要向他挑明一下，纵使他想什么都不干地过日子，可他没有理由妨碍别人干事。他天天晚上呆在家里，这就意味着有一户人家第二天没了口粮。</p>
<p>诚实人感到他无力反抗这样的逻辑。从此他也像他们一样，晚上出门，次日早晨回家。但他不行窃。他是诚实的。对此，你是无能为力的。他走到远处的桥上，看河水打桥下流过的情形。每次回家，他都会发现家里失窃了。</p>
<p>不到一个星期，诚实人就发现自己已经一文不名了；他家徒四壁，没有任何东西可吃。但这算不了什么，因为那是他自己的错。不，总之是他的行为使其他的人很不安。因为他让别人偷走了他家的一切却不从别人家那儿偷任何东西。这样总有人在黎明回家时，发现家里没被动过——那本该是由诚实人进去行窃的。</p>
<p>不久以后，那些没有被偷过的人家发现他们比别的人家富了，就不想再行窃了。糟糕的是，那些跑到诚实人家里去行窃的人，总发现里面空空如也，因此他们就变穷了。</p>
<p>同时，富起来的那些人和诚实人一样，养成了晚上去桥上的习惯，他们也看河水打桥下流过的情形。这样，事态就更混乱了。因为这意味着更多的人在变富，也有更多的人在变穷。</p>
<p>现在，那些富人发现，如果他们天天去桥上，他们很快也会变穷的。他们就想：“我们雇那些穷的去替我们行窃吧。”他们签下合同，敲定了工资和如何分成。自然，他们依然是贼，依然相互欺骗。但形势表明，富人是越来越富，穷人是越来越穷。</p>
<p>有些人富裕得已经根本无须亲自行窃或雇人行窃就可保持富有。但一旦他们停止行窃的话，他们就会变穷，因为穷人会偷他们。因此他们又雇了穷人中的最穷者来帮助他们看守财富，以免遭穷人行窃，这就意味着要建立警察局和监狱。</p>
<p>因此，在那个诚实人出现后没几年，人们就不再谈什么偷盗或被偷盗了，而只说穷人和富人；但他们个个都还是贼。</p>
<p>惟一诚实的只有那个诚实的人，但他不久便死了，是饿死的。</p>
]]></content>
      <categories>
        <category>集文</category>
      </categories>
      <tags>
        <tag>外国文学</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/06/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>元旦</title>
    <url>/2024/01/01/%E5%85%83%E6%97%A6/</url>
    <content><![CDATA[<p>元旦已至。</p>
<p>此记恰为纪念。</p>
<p>在这到可以随口说说话了。</p>
<p>首先，一个人过元旦确实是无聊。</p>
<p>但是，又能怎样呢？可以预见的未来中，生活任是那样。难以有人真正与我分享生活，参与我的生活。</p>
<p>可那又怎样呢？实话说，我不知道。生活总是这样，后知后觉，徒增烦恼。我总是无法跳出我的认知，或者说，我总是那么天真。</p>
<p>日子这样一天天过，改变是缓慢的，我茫然地望着自己，不知从何做起。这样，这样啊，那就只能先交给时间，先做好当下，进步自己，在机遇来到时，迎上去吧。</p>
<p>顺便附上我翻译的一首诗吧</p>
<h2 id="Shall-I-Compare-Thee-to-a-summer’s-Day"><a href="#Shall-I-Compare-Thee-to-a-summer’s-Day" class="headerlink" title="Shall I Compare Thee to a summer’s Day?"></a><em>Shall I Compare Thee to a summer’s Day?</em></h2><p>我怎能够把你来比拟作夏天？</p>
<p>你比他更可爱也更温婉；</p>
<p>狂风把五月宠爱的嫩蕊凋残，</p>
<p>夏日的租期又未免太短；</p>
<p>天上的眼睛有时照得太酷烈，</p>
<p>他的金颜又常遭云雾迷蒙；</p>
<p>机缘丧失在无常的天命，</p>
<p>唯有你的长夏将永远不会凋落，</p>
<p>你的皎洁也不会损失；</p>
<p>死神也无缘将你幽禁，</p>
<p>你在我不朽的诗里与时同长。</p>
<p>只要我的诗篇尚为世人吟诵、传颂，</p>
<p>这诗将不朽，并且永葆你的芳颜。</p>
]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>hello_blog</title>
    <url>/2023/06/29/hello-blog/</url>
    <content><![CDATA[<p> 这是一篇测试博客！</p>
]]></content>
      <tags>
        <tag>开心</tag>
      </tags>
  </entry>
  <entry>
    <title>花园茶会</title>
    <url>/2023/06/29/%E8%8A%B1%E5%9B%AD%E8%8C%B6%E4%BC%9A/</url>
    <content><![CDATA[<h2 id="花园茶会"><a href="#花园茶会" class="headerlink" title="花园茶会"></a>花园茶会</h2><p> [英]凯瑟琳·曼斯菲尔德</p>
<p> 这真是个让人称心如意的好天气，晴朗的天空没有一片云朵。清晨，花匠早早地起来修剪草坪，把草坪打扫干净。就像得到了大天使的帮助，一夜之间，花园里上百朵玫瑰绽开了花苞，压得绿色的花枝弯曲下来。</p>
<p> “我们去花园看看吧，从后门出去，”劳拉对琼斯说，“我想知道凉棚搭好了没有。”</p>
<p> 但是后门不能通过了，厨子和送蛋糕的人挡在那里。</p>
<p> “怎么了？”</p>
<p> “小姐，对面的斜坡下面有一些简陋的小房子，你知道吗？有个赶马车的小伙子住在那儿，他姓斯各特。今天早晨，牵引车把他的马吓着了，受了惊的马把他摔下来，他的头撞到了地上，没命了。”送蛋糕的人饶有兴致地讲着。</p>
<p> “他死了？”劳拉瞪大了眼睛。</p>
<p> “被抬起来的时候就死了，我到这里送蛋糕时，看见他们家的人正把他抬回去。他家里还有老婆和五个孩子。”</p>
<p> 劳拉抓住琼斯的手臂，神色惊慌地说：“我们怎样才能把它给取消了呢？现在我就到楼上去和妈妈谈谈。”</p>
<p> 希恩太太正在试她的新帽子。劳拉气喘吁吁地告诉了母亲那个不幸的消息。</p>
<p> “我们的茶会必须取消了，是吗？客人和乐队一来，就会被他们家听到，他们离我们太近了。”</p>
<p> 劳拉没有想到母亲并不同意。“我的孩子，你应该合情合理地想一想。我们是在无意中知道这件事的。你回答我，如果那些小房子里有人生病死掉，我们不是也要照常过我们的生活吗？”</p>
<p> “妈妈，我们这样做是不是太冷酷了？”</p>
<p> “宝贝儿！”希恩太太拿着那顶帽子走过来，劳拉还来不及阻止，她就把手里的帽子戴在劳拉头上了，“好孩子，这顶帽子你戴正合适，简直是给你做的。我戴着有些太年轻了。你自己好好看一看，你有多漂亮！”她把小镜子举到劳拉面前。</p>
<p> “不，妈妈！”劳拉没有妥协的意思，她把脸转到一边。</p>
<p> “劳拉，你这样就太让人失望了。”希恩太太冷冷地说。</p>
<p> “我实在不明白。”劳拉站起来走了，她回到自己的卧室。一进门，就在镜子里看到一个漂亮迷人的姑娘，头上那顶装饰着金色野菊花的黑色帽子上，有一条长长的黑丝绒带子垂下来。她从来没有想到，自己竟然这样好看。她疑惑了，难道母亲说的没错？可是她又好像看见那个带着一群小孩，把丈夫的尸体抬回家的不幸女人。她决定等园会结束后再去考虑这件事。</p>
<p> 随后受到邀请的客人们都先后到来了。乐队开始演奏。仆人都从房子里出来，走到凉棚下。草坪上有很多的客人在悠闲地漫步，一群朋友欢聚在一起，相互拉手、亲吻，开心地笑，真是太愉快了！</p>
<p> “姑娘，这帽子可真合适！”</p>
<p> “劳拉，你今天怎么格外漂亮啊？简直像个西班牙女郎。”</p>
<p> 这个美好的下午像鲜花一样，怒放之后又慢慢合上花瓣。</p>
<p> 所有的客人都告辞了，希恩太太看见桌子上还有许多吃剩的蛋糕、点心和三明治，不吃掉都会变质的。她又有了一个出色的念头。“我们装个篮子，把这些完全是好好的食物送给那可怜人。不管怎样，孩子们可以大吃一顿了。你们同意吗？而且一定会有邻居去看她，这么多的现成的点心该多好。劳拉！”她高兴地要跳起来，“到贮藏室把那个最大的篮子拿来。”</p>
<p> “妈妈，我们这样做恐怕不太合适吧？”劳拉说。她想，那个女人会愿意接受这些吃剩的东西吗？</p>
<p> “有什么不合适的！你到底怎么回事？”劳拉赶紧把篮子拿来。母亲把东西都塞到篮子里。“你给她送过去吧，就这样去，不必换衣服了。”</p>
<p> 这时候天色已经发暗了，在一个喧闹的下午过后，傍晚变得一片寂静。</p>
<p> 她横穿过街道，走进狭窄的小巷。她低着头加快了脚步，头上那顶有丝绒带子的大帽子真是引人注意，实在不该戴来！算了，既然已经来了。就是这里，到了，没错。</p>
<p> 劳拉感到异常紧张，真希望马上离开这儿！她走过去敲了敲门。</p>
<p> 门开了，一个穿着丧服的小个女人出现在门口。女人说：“请进，小姐。”</p>
<p> “噢，不，”劳拉说，“我是来送东西的……”那个小个女人好像对她的话充耳不闻。“请走这边，小姐。”</p>
<p> 劳拉发现自己到了一个破旧、狭小、低矮的厨房，里面点着一盏冒烟的灯。火炉旁坐着一个女人。她的脸浮肿而红胀，眼睛和嘴唇都肿着，看上去很可怕。劳拉只盼望尽快离开这里。她又走到走廊里，推开门就向前走，没想到走进了卧室，尸体就放在这里。</p>
<p> 一个年轻男人躺在那里，正在酣睡——睡得这样熟，这样深，他的头沉沉地陷在枕头里，眼睛安静地闭着，这双闭着的眼睛再也看不见任何东西了。他完全进入了另一个世界。那些茶会，篮子，装饰着花边的裙子，和他又有什么关系呢？</p>
<p> 眼泪总是忍不住要流。她是不能一言不发就走开的，于是她大声地哭了一声，像一个小孩子。</p>
<p> “请原谅我这顶帽子。”她说。</p>
<p> 她没有等小个女人给她带路，自己摸索到门，走出去了。走到小巷口的时候她看到了劳瑞。</p>
<p> “你没事吧？妈妈很着急。”</p>
<p> “我没事。哦，劳瑞，我的哥哥！”她一下抓住他的手臂，紧紧地靠住他。“哥哥……”她抬头看着劳瑞，“你说，人生是不是，”她又说，“人生是不是——”可是，她又说不出来了。</p>
]]></content>
      <categories>
        <category>集文</category>
      </categories>
      <tags>
        <tag>外国文学</tag>
      </tags>
  </entry>
  <entry>
    <title>诗歌杂记（一）</title>
    <url>/2023/06/29/%E8%AF%97%E6%AD%8C%E6%9D%82%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="集诗"><a href="#集诗" class="headerlink" title="集诗"></a>集诗</h1><h2 id="现代诗"><a href="#现代诗" class="headerlink" title="现代诗"></a>现代诗</h2><h4 id="沁园春·雪"><a href="#沁园春·雪" class="headerlink" title="沁园春·雪"></a>沁园春·雪</h4><h5 id="【作者】毛泽东-【朝代】近现代"><a href="#【作者】毛泽东-【朝代】近现代" class="headerlink" title="【作者】毛泽东 【朝代】近现代"></a>【作者】毛泽东 【朝代】近现代</h5><p>北国风光，千里冰封，万里雪飘。</p>
<p>望长城内外，惟余莽莽；大河上下，顿失滔滔。</p>
<p>山舞银蛇，原驰蜡象，欲与天公试比高。</p>
<p>须晴日，看红装素裹，分外妖娆。</p>
<p>江山如此多娇，引无数英雄竞折腰。</p>
<p>惜秦皇汉武，略输文采；唐宗宋祖，稍逊风骚。</p>
<p>一代天骄，成吉思汗，只识弯弓射大雕。</p>
<p>俱往矣，数风流人物，还看今朝。</p>
<h4 id="再别康桥"><a href="#再别康桥" class="headerlink" title="再别康桥"></a>再别康桥</h4><h5 id="【作者】徐志摩-【朝代】现代"><a href="#【作者】徐志摩-【朝代】现代" class="headerlink" title="【作者】徐志摩 【朝代】现代"></a>【作者】徐志摩 【朝代】现代</h5><p>轻轻的我走了，<br>正如我轻轻的来；<br>我轻轻的招手，<br>作别西天的云彩。</p>
<p>那河畔的金柳，<br>是夕阳中的新娘；<br>波光里的艳影，<br>在我的心头荡漾。</p>
<p>软泥上的青荇，<br>油油的在水底招摇；<br>在康河的柔波里，<br>我甘心做一条水草！</p>
<p>那榆荫下的一潭，<br>不是清泉，是天上虹；<br>揉碎在浮藻间，<br>沉淀着彩虹似的梦。</p>
<p>寻梦？撑一支长篙，<br>向青草更青处漫溯；<br>满载一船星辉，<br>在星辉斑斓里放歌。</p>
<p>但我不能放歌，<br>悄悄是别离的笙箫；<br>夏虫也为我沉默，<br>沉默是今晚的康桥！</p>
<p>悄悄的我走了，<br>正如我悄悄的来；<br>我挥一挥衣袖，<br>不带走一片云彩。</p>
<h2 id="古代诗"><a href="#古代诗" class="headerlink" title="古代诗"></a>古代诗</h2><h4 id="摸鱼儿·雁丘词"><a href="#摸鱼儿·雁丘词" class="headerlink" title="摸鱼儿·雁丘词"></a>摸鱼儿·雁丘词</h4><h5 id="【作者】元好问-【朝代】金"><a href="#【作者】元好问-【朝代】金" class="headerlink" title="【作者】元好问 【朝代】金"></a>【作者】元好问 【朝代】金</h5><blockquote>
<p>​	乙丑岁赴试并州，道逢捕雁者云：“今旦获一雁，杀之矣。其脱网者悲鸣不能去，竟自投于地而死。”予因买得之，葬之汾水之上，垒石为识，号曰“雁丘”。同行者多为赋诗，予亦有《雁丘词》。旧所作无宫商，今改定之。</p>
</blockquote>
<p>问世间，情是何物，直教生死相许？<br>天南地北双飞客，老翅几回寒暑。<br>欢乐趣，离别苦，就中更有痴儿女。<br>君应有语：<br>渺万里层云，千山暮雪，只影向谁去？<br>横汾路，寂寞当年箫鼓，荒烟依旧平楚。<br>招魂楚些何嗟及，山鬼暗啼风雨。<br>天也妒，未信与，莺儿燕子俱黄土。<br>千秋万古，为留待骚人，狂歌痛饮，来访雁丘处。</p>
<h2 id="外国诗"><a href="#外国诗" class="headerlink" title="外国诗"></a>外国诗</h2><h4 id="Seven-times-have-I-despised-my-soul"><a href="#Seven-times-have-I-despised-my-soul" class="headerlink" title="Seven times have I despised my soul:"></a>Seven times have I despised my soul:</h4><h4 id="我曾七次鄙视自己的灵魂"><a href="#我曾七次鄙视自己的灵魂" class="headerlink" title="我曾七次鄙视自己的灵魂"></a>我曾七次鄙视自己的灵魂</h4><p>——Kahlil Gibran</p>
<p>The first time when I saw her being meek that she might attain height.</p>
<p>第一次，当她本能攀登高峰，却故作温顺</p>
<p>The second time when I saw her limping before the crippled.</p>
<p>第二次，当她在瘸子面前，却故意跛行</p>
<p>The third time when she was given to choose between the hard and the easy, and she chose the easy.</p>
<p>第三次，当她在难易间抉择，却甘于容易</p>
<p>The fourth time when she committed a wrong, and comforted herself that others also commit wrong.</p>
<p>第四次，当她犯了错，却用别人来宽慰自己</p>
<p>The fifth time when she forbore for weakness, and attributed her patience to strength.</p>
<p>第五次，当她无视软弱，却把它当作坚韧</p>
<p>The sixth time when she despised the ugliness of a face, and knew not that it was one of her own masks.</p>
<p>第六次，当她鄙夷丑陋，却不知那也是她的一面</p>
<p>And the seventh time when she sang a song of praise, and deemed it a virtue.</p>
<p>第七次，当她仅仅只吟诵赞歌，却把它当作美德</p>
]]></content>
      <categories>
        <category>集诗</category>
      </categories>
      <tags>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机嵌入式三级</title>
    <url>/2024/10/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%B5%8C%E5%85%A5%E5%BC%8F%E4%B8%89%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="计算机三级嵌入式考试"><a href="#计算机三级嵌入式考试" class="headerlink" title="计算机三级嵌入式考试"></a>计算机三级嵌入式考试</h1><p>1，数字信号处理器英文缩写DSP，</p>
<p>2，嵌入式处理芯片大多属于超大规模和极大规模。</p>
<p>3，IP地址不属于以太数据帧内容。</p>
<p>4，一个A类IP地址有一个字节的网络地址和三个字节的主机地址组成，网络地址的最高为必须为0，即第一段数字范围是1~127，每个A类地址可以连接16387064台主机，共有126个A类地址。</p>
<p>5，arm的总线结构为AMBA。</p>
<p>6，arm处理器复位后自动进入arm状态。</p>
<p>7，STR R0，【R1】　　将R0的值传送到以R1的值为地址的存储器中。</p>
<p>8，清零AND，置位ORR</p>
<p>9，LDR不能与#同时出现。</p>
<p>10，RTC与外围总线相连。</p>
<p>11，8个GPIO引脚最多可以构成64个按键的键盘。</p>
<p>12，任务处于休眠态，相当于该任务驻留在内存中，但还没有交给内核管理。</p>
<p>13，任务调度的前导函数：OSSched()函数。</p>
<p>14，ucosII的节拍率应在每秒10次到100次之间。</p>
<p>15，事件控制块用函数：OSQCreate()。</p>
<p>16，ARM是英国公司发明的。</p>
<p>17，我国汉字编码标准：GB2312和GB18030。</p>
<p>18，TCP&#x2F;IP协议簇中的IP协议。</p>
<p>19，复位，外部中断请求，快速中断。</p>
<p>20，ADDCEQ R3，R1，R2　　如果相等则相加后赋值，SUBHIS R3，R1，R2如果大于，则相减后赋值。</p>
<p>21，AMBA：先进微控制器总线体系结构。</p>
<p>22，模拟组件包括ADC和DAC。</p>
<p>23，两种闪存技术：NOR Flash以字节为单位随机存取。NAND Flash以页为单位随机存取。</p>
<p>24，MISO：主机输入从机输出。MOSI：主机输出从机输入。</p>
<p>25，ucosII内核提供：任务调度，存储管理。</p>
<p>26，引导加载程序完成：加电自检加载并启动操作系统。</p>
<p>27，JTAG接口调试。</p>
<p>28，以太网通信电路包括控制电路和驱动电路。</p>
<p> 1，数字音频信号数字化过程，正确的顺序是：取样，量化，编码。</p>
<p>2，系统模式是运行具有特权的操作系统任务。</p>
<p>3，ADD加操作，ADC带进位加。</p>
<p>4，间接寻址的寄存器必须用【】括起来。</p>
<p>5，DCD，用于分配一片连续的字存储单元。</p>
<p>6，实现分支和循环：先用例如CMP产生比较的，然后通过带状态的条件转移指令BX来实现。</p>
<p>7，用SRAM作为cache（高速缓冲存储器）</p>
<p>8，DDR2 SDRAM可以预读取4位数据（双倍数据速率）</p>
<p>9，USB2.0速度480Mbps，3.0达到640Mbps</p>
<p>10,DVI是一种LCD接口的标准。</p>
<p>11，RTC内部的数据寄存器都是8位寄存器，存放响应的BCD码值。</p>
<p>12，ucosII能够支持的任务最多为64个。</p>
<p>13，vxwork操作系统不支持用户界面移植。</p>
<p>14，window7不是实时操作系统。（响应中断请求并且完成相应中断服务子程序的时间非常快）</p>
<p>15，硬件抽象层，位于硬件电路板和操作系统之间，所以它不是内核的组成部分。</p>
<p>16，安卓os是单内核，IOS是微内核。</p>
<p>17，JPEG，JTAG，wi-fi（最高速率可达108Mbps）书写格式要注意。</p>
<p>18，R13堆栈指针SP，R14程序链接寄存器LR</p>
<p>19，ROM只读存储器，RAM随机存储器</p>
<p>20，IIC是串行半双工传输总线标准。</p>
<p>21，通用输入输出接口，用英文大写字母缩写为GPIO</p>
<p>22，休眠模式：仅断开内核时钟，掉电模式：断开内部电源。</p>
<p>23，普通实时系统：响应在微妙和毫秒级</p>
<p>24，ucosII基本功能：任务管理，内存管理，任务间通信与同步，任务调度，时间管理。</p>
<p>25，引导加载程序主要完成内存地址映射和启动操作系统。</p>
<p>26，就绪任务登就绪表中记在，最多可有64个任务。</p>
<p>27，通信机制：信号，信号量，消息队列，套接字，共享内存，管道。</p>
<p>28，ADS1.2把目标文件划分为RO段，RW段，ZI段，RO段是指代码和常数的存储区域。</p>
<p>29，GDB是调试器工具。</p>
<p>30，最小硬件系统：电源电路，时钟电路，复位电路，调试测试接口，存储器。</p>
<p>31，LED的段选输出和位选输出，i&lt;&lt;&#x3D;1表示左移1位，串口UART，无校验，也会占一个字节。，复位异常对应地址为0x00000000,各个间隔4个字节，复位异常存储一条分支指令代码。</p>
<p>32，UTF-16采用双字节可变长编码，其他不常用字符则使用4字节编码。</p>
<p>33，每个终端设备的IP地址是可以修改的。</p>
<p>34，LE为带符号数小于等于，</p>
<p>35，#立即数寻址，【】寄存器间接寻址，其他是寄存器寻址。</p>
<p>36，子程序调用通过BL，带状态切换转移BX，</p>
<p>37，EOR逻辑异或，ORR逻辑或。</p>
<p>38，随机存取存储器包括静态和动态，都是易失性存储器，掉电后丢失。</p>
<p>39,IIC可以有多个主器件,串行半双工.</p>
<p>40,USB采用半双工差分方式，采用主从方式.</p>
<p>41,电阻是软屏,电容是硬屏,专用钢笔的是电阻屏.</p>
<p>42,bank0只能访问16位和32位总线宽度,其他bank还可以访问8位.</p>
<p>43,ucosII基本不包括设备驱动程序,只是一个纯内核.</p>
<p>44,OSSched()函数对应的满足条件是:两个量都为0.</p>
<p>45,创建任务自用空间栈代码:OS_CPU_C.c</p>
<p>46,空白链表中包括标志链表和内存控制块链表.</p>
<p>47,Linux和安卓都是单内核　　ucosII和iOS是微内核.</p>
<p>48,实时操作系统特征:具有处理异步IO和中断处理能力,内存锁定,优先级中断和调度,抢占式调度.</p>
<p>49,一个工程项目至少包含一个生成目标,可执行模板:Debug,Release,DebugRel.</p>
<p>50,CPU包括:控制器,运算器,外部的存储器.</p>
<p>51,IEEE802.11切记,IEEE 802.11n可达108Mbps传输速率</p>
<p>52,RISC,CICS,CPSR(程序状态寄存器)</p>
<p>53,LSR为右移操作.</p>
<p>54,LDRB存储器到寄存器,STR相反.</p>
<p>55,UART：通用异步收发器，包括：发送器，接收器，控制单元，波特率发生器．</p>
<p>56，AHB连接高速组建，APB连接低速组件．</p>
<p>57,慢速模式,不使用MPLL时钟,由外部晶体提供.</p>
<p>58,OSInit()OSTaskCreate()OSStart()</p>
<p>59,就绪位为1.</p>
<p>60,Bootloader:以太网,串口,USB接口装载.</p>
<p>61,中断服务子程序的终结,中断嵌套计数器的值减一.</p>
<p>62,下载到目标机进行调试,烧写到ROM的工具俗称”编程器”,编译连接器,硬件在线调试</p>
<p>1，CPU使用最多的是8和16位，硬件资源受限，不易扩展。</p>
<p>2，DSP并非高性能通用微处理器，它是专用于数字信号处理的。</p>
<p>3，MPEG-2有线电视压缩编码格式。</p>
<p>4，路由器：将多个异构或同构的物理网络进行互联。信号的放大是集线器。</p>
<p>5，LT为带符号小于。</p>
<p>6，MOV PC LR 在ARM汇编中用于子程序的返回，B指令跟子程序无关。</p>
<p>7，flash为非易失存储器。</p>
<p>8，UART总线双向通信，可以实现全双工。</p>
<p>9，CAN总线：有线通信接口，能够实现多主通信，</p>
<p>10，RTAL是典型的嵌入式Linux操作系统之一。</p>
<p>11，ucosII一般具有：应用软件层，API层，内核层，设别驱动层。四层。</p>
<p>12，Linux主要由用户进程，OS服务组件，Linux内核组成。</p>
<p>13，指令集模拟器只是在宿主机上运行的纯软件工具。</p>
<p>14，GIF有256个色素。</p>
<p>15，“热点的正式名称为”：无线接入点。</p>
<p>16，按位清零：相当于相减</p>
<p>17，SPI：串行时钟线SCK，主机输入／从机输出数据线MISO，主机输出MOSI／从机输入数据线，低电平有效的从机选择ＳＳＥＬ。</p>
<p>18，实时系统的任务时限有两种类型，分别是截至时间和任务执行预设时间。</p>
<p>19,仿真平台指:虚拟机管理软件和仿真软件,指令集模拟器.</p>
<p>20,任务的5种状态:休眠,运行,就绪,挂起,被中断.</p>
<p>21,RTOS响应中断请求并完成相应中断服务子程序非常快,专业术语叫抖动.</p>
<p>22,GDB是调试器工具.</p>
<p>23,JTAG规定有5跟信号线.</p>
<p>1，Soc最大的特点是成功实现了软硬件无缝结合，它可能包含一个或多个处理器。</p>
<p>2，当前最快的CPU已经超过了10G。</p>
<p>3，1600万色（真彩色），占用3B空间。</p>
<p>4，.war是数字音频文件格式。</p>
<p>5，路由器拥有多个输入和输出端口，可以连接多个网络，路由器，每个端口分配一个IP，路由器按照端口接入的网络号判断。</p>
<p> 6，32位arm处理器支持字节半字字三种数据结构。</p>
<p>7，LDRB：字节数据加载指令。</p>
<p>8，数码相机存储卡的flash均采用NANDFalsh。</p>
<p>9，GPIO可以实现I&#x2F;O。SPI，UART，IIC是串行。</p>
<p>10，电源管理模块有四种模式：正常，慢速，空闲，掉电。任何模式下复自动进入正常模式。</p>
<p>位操作都可以</p>
<p>11，三个UART接口：UART0，UART1，UART2，其对应的线路控制寄存器为ULCON0，ULCON1，ULCON2。</p>
<p>12，RTOS响应时间的具体指标是：中断延迟时间和任务切换时间。</p>
<p>13，Tiny OS主要用于无线传感器网络，属于轻量级的操作系统。</p>
<p>14，安卓是以Linux为基础的半开放源码操作系统，使用不同的软件开发包，则使用的编程语言也可以不同。</p>
<p>15，QNX具有一个很小的内核，即微内核系统。</p>
<p>16，VxWorks属于大型商用操作系统。</p>
<p>17，微内核采取服务器方式实现，所有进程请求使用统一接口。不需要区分内核模式和用户模式。</p>
<p>18，引导加载程序对应的英文术语是Bootloader。</p>
<p>19，GDB下file命令是装入需要的调试可执行文件，run命令执行当前被调试的程序。</p>
<p>20，硬件包括中央处理器和存储器，通过I&#x2F;O接口与外界联系。</p>
<p>21，JPEG在数码相机种广泛使用。</p>
<p>22，蓝牙10米。</p>
<p>23，thumb-2中打开可屏蔽指令为CPSIE I，关闭CPSID I</p>
<p>24，高清晰度多媒体接口简称HDMI，它是一种数字化接口。</p>
<p>25，给定时间系统可以处理的时间称吞吐量，超过规定时间，处理器接受的数据不能给出有用输出数据，这个时间称为生存时间。</p>
<p>26，对硬件进行控制和管理的程序称为驱动程序</p>
<p>27，嵌入式系统加电或复位的时候，CPU执行的第一条指令就是引导加载程序的第一条指令。</p>
<p>28，跳转到操作系统所在的空间，可以给内核传递参数，控制系统启动模式。</p>
<p>29，uboot是一种通用引导加载程序，对PowerPC系列处理器支持最丰富，对Linux操作系统支持最为完善。</p>
<p>30，软件固化在目标机ROM种的程序，不需要专门的硬件调试和仿真设备。</p>
<p>31，地址映射连接类型有2种方式：Simple和Scattered连接方式，提供一个scatter格式的配置文件。</p>
<p>1，通用soc芯片中而可以只有一个cpu，称为单核soc也可以包含多个CPU，称为多核soc.</p>
<p>2，数码相机中还有一个低功耗的8位MCU，负责进行操作控制。</p>
<p>3，一个汉字占两个字节。</p>
<p>4，数字有线电视所传输的数字视频采用的压缩编码是MPEG-2。</p>
<p>5，C类网络地址数量较多，适用于小规模的局域网络。每个网络最多包含254台计算机。</p>
<p>6，嵌入式处理器的体系结构按指令集可分为CISC和RISC。按存储机制可分为冯诺依曼和哈佛结构。</p>
<p>7，arm处理器复位后总处于ARM状态。</p>
<p>8，CPSR：当前状态寄存器。</p>
<p>9，LDR是存储器到寄存器的数据传输指令，#是立即数符号。</p>
<p>10，字节数据存储指令用STRB，！代表地址自动更新。</p>
<p>11，与1进行逻辑或运算，可以达到指定位置位的作用。</p>
<p>12，前向通道通常是输入接口，后向通道是输出接口。</p>
<p>13，定时计数组件：WDT看门狗定时器，timer通用定时器，RTC，PWM脉宽调制器。</p>
<p>14，共阴极接法：亮的数字为1。</p>
<p>15，轮转调度不是实时操作系统必须具备的。</p>
<p>16，ucosII属于强实时操作系统。</p>
<p>17，ucosII不支持时间片轮转调度法，只能管理64个任务，8个是内核内务，只剩56个任务。</p>
<p>18，ucosII进行移植不必须的条件是：该电路板处理器具备MMU存储管理单元。</p>
<p>19，HAL系统库不提供：为系统提供TCP&#x2F;IP协议栈。</p>
<p>20，iOS的前身是UNIX-BSD。</p>
<p>21，目标机的初始启动程序调试硬件接口调试，一般都采用JTAG。</p>
<p>22，开发工具的目的：提高开发质量，缩短开发周期，降低开发成本。</p>
<p>23，IP核通常分为软核，硬核，固核。</p>
<p>24，数码相机用的是闪存卡即flash存储器。</p>
<p>25，无线局域网，所采用的通信协议主要是802.11，数据传输速率可以达到11，54，108Mbps。</p>
<p>26，Thumb-2指令集提供了专门用于开关中断的专用指令，关：CPSID I ，开：CPSIE I 。</p>
<p>27，汇编语言程序调用子程序的指令：BL 程序名。子程序返回调用程序的指令为MOV　PC，LR。</p>
<p>28，系统总线主要用于连接高带宽快速组件。</p>
<p>29,铁电随机存取存储器FRAM　　磁性随机存取存储器MRAM.</p>
<p>30,半导体存储器芯片的存储容量取绝于:地址总线的条数,数据总线的位数.</p>
<p>31,总线控制遵循的原则是谁先发送低电平,谁有控制权.</p>
<p>32,嵌入式系统通常也具备引导加载程序,外设驱动程序.</p>
<p>33,软件运行在嵌入式系统上,往往会代码轻量化,占由存储资源少的特点.</p>
<p>34,任务时限有两种:截至时间和任务执行预设时间.<br>35,可预测性成为实时系统的一项重要性要求.</p>
<p>36,嵌入式系统的开发过程顺序可以分为:需求分析与规格说明,系统设计,构件设计,系统集成4个阶段.</p>
<p>37,arm-linux-gcc交叉编译器.</p>
<p>38,灰度等级为256的话,一幅图片占1B.</p>
<p>39,片选信号CS低电平有效.</p>
<p>40,OSStart()函数用来启动多任务调度功能.</p>
<p>41,异步串行每发送8个字节有一个起始位和停止位.</p>
<p>1，闪存卡主要是用来存储照片，而不是系统软件。</p>
<p>2，MP3采用MPEG-1层III算法，</p>
<p>3，局域网可以分为以太网，FDDI网，令牌网，以太网以集线器或交换机为中心构成。</p>
<p>4，CPSR是当前程序状态寄存器。</p>
<p>5，从异常中断返回：恢复原来被保护的用户寄存器，将SPSR_mode寄存器值恢复到CPSR中，根据PC值恢复成断点地址，清除I和F标志，允许IRQ和FIQ中断。</p>
<p>6，LDR整个数据，LDRB读入字节数据，LDRH读入半字数据。</p>
<p>7，MUL乘法操作，BIC位清零操作。</p>
<p>８，R１５即PC，MOV　PC，LR用于子程序返回。</p>
<p>9,VS表示溢出.</p>
<p>10,低压交流电不可以直接供电.</p>
<p>11,JTAG与AMBA的系统总线相连.</p>
<p>12,NAND Flash主要用于片外程序存储器,引脚ALE,CE,RE,R&#x2F;B分别表示:地址锁存允许,低电平有效的芯片使能,低电平有效的读使能,准备就绪&#x2F;忙输出.</p>
<p>13,USB采用半双工差分方式,UART可用全双工串行异步通信.</p>
<p>14,板级支持包(BSP)内容:初始化程序,设备驱动程序,引导加载程序.</p>
<p>15,空闲任务是系统创建的第一个任务.</p>
<p>16,MCS－５１单片机，其软件固化要使用称为”编程器”的设备来进行.</p>
<p>17,无线局域网(WLAN或WiFi),必须安装在有接入点的区域.</p>
<p>18,当I&#x3D;1,将禁止外部中断IRQ,当F&#x3D;0,允许快速中断FIQ．</p>
<p>19，MPU存储器保护单元，允许处理器４GB的地址空间定义．</p>
<p>20,指示下面为16位代码的伪指令是:CODE16.　　DCD 用于分配一片连续的字节存储单元并用指定数据初始化.</p>
<p>21,最小系统中:电源电路,时钟电路,复位电路</p>
<p>22,两种闪存:NOR Flash和NAND Flash,前者以字节为单位存取,后者以页为单位随机存取.</p>
<p>23,通用分组服务技术:GPRS,支持AT指令集合实现业务.</p>
<p>24,吞吐量:英文名称:Throughput</p>
<p>25,iOS微内核.</p>
<p>26,HAL技术:硬件抽象层,</p>
<p>27,内核的5个子系统:内存子系统,进程调度子系统,网络接口,虚拟文件系统,进程间通信.</p>
<p>28,C语言编译器的命令书写格式中,其前缀的命令是:ＡＲＭ_Linux_GCC</p>
<p>28,ucosII 总共64个任务,系统自己使用的8个,用户编程的56个.</p>
<p> 1，量化：A&#x2F;D（模数转换）量化位数越高，保真越好，位数越少，数据量少。</p>
<p>2，局域网范围小，往往属于一个单位自建自营，不通过光缆，使用专门铺设的传输介质进行联网通信。</p>
<p>3，IP v42011年已经分配完毕。</p>
<p>4，对异常的响应过程：将CPRS的值保存到将要执行的异常中断对应的SPSR，设置CPSR的相应位，将断点地址保存到R14 中，给PC强制赋值。</p>
<p>5，MMU通过TLB表得到的是物理地址。</p>
<p>6，数值的一半可以通过逻辑右移1位完成。</p>
<p>7，DCW分配半字存储空间</p>
<p>8，EQU用于为程序中的常量，标号等定义一个等效的字符名称。</p>
<p>9，半字数据加载LDRH</p>
<p>10，嵌入式处理器必须在供电下才能正常工作，处理器本身不是一个最小系统，包括各个电路。</p>
<p>11，铁电和磁性存储器均非传统的半导体存储器，Cache采用SRAM</p>
<p>12，USB版本：1.0，1.1，2.0，3.0</p>
<p>13，arm复位后PC无条件指向0x00000000</p>
<p>14，中断控制器：DMA连接在系统总线上。</p>
<p>15，window　ｐｈｏｎｅ　８是手机操作系统，属于嵌入式操作系统。</p>
<p>16,BSP板级支持包是操作系统底层软件,有引导加载程序.</p>
<p>17,Linux内核最新版本:3.0版本,不同体系结构的CPU,内核源代码各不相同.</p>
<p>18,就绪态:该任务已经可以运行,但由于优先级不够暂时不能运行.</p>
<p>19,嵌入式的开发平台大多是宿主机-目标机的架构,宿主机是开发用机,软件的开发调试完成都通过宿主机</p>
<p>10,ARM公司的ARM内核占主要.</p>
<p>11,LDRH半字加载,比平时多.</p>
<p>12,时钟信号有:内置时钟信号,和外部时钟信号.</p>
<p>13,DMA控制器:在芯片内部.</p>
<p>14,存储容量:2^地址数*数据线数.</p>
<p>15,一般采用向量中断或嵌套向量中断方式管理中断.</p>
<p>16,CAN总线的数据帧包括:数据域,校验域.</p>
<p>17,相应时间的具体指标:中断延迟时间,任务切换时间.</p>
<p>18,ucosII有4层:应用程序层,应用程序接口层,uc&#x2F;os-II内核层,设备驱动层.</p>
<p>19,JTAG规定了5个信号:TCK(时钟线信号),TMS,TDI,TDO,TRST.</p>
<p>20,运行GDB命令进入调试环境，先ｆｉｌｅ test,再run.</p>
<p>21,内置时钟信号,外部时钟信号.</p>
<p>22,UART有三个接口0~2</p>
<p>23,计算MB与地址空间运算时，不计算B的量，一个地址存储８位．</p>
<p>24,网页使用HTML语言编程.Web服务器,网页设计和CGI接口设计.</p>
<p>1，数码相机：扫描，分色，取样，量化。</p>
<p>2，有线通信需要使用金属导体或光导纤维。</p>
<p>3，Cortex-A系列都基于ARMV7-A。</p>
<p>4，用户模式是程序正常执行工作模式，如果没有异常不能改变工作模式。</p>
<p>5，BIC是位清除指令，BCC为条件跳转指令。</p>
<p>6，Cortex-M3只有Thumb-2和调试状态。</p>
<p>7，“！”表示在完成数据传送之后应该更新基址寄存器，但内存的值不变。</p>
<p>8，AMBA总共已有4个版本。</p>
<p>9，CAN即控制器局域网，采用差分传输，利用CAN可构成多主多从系统，数据帧由7个域组成。</p>
<p>10，SPI中四根线，是相互对应相同的，不是相反。</p>
<p>11，就绪态：因为有跟高优先级任务剥夺CPU使用权。</p>
<p>12，单内核结构是传统操作系统采用的结构，不是基于客户机&#x2F;服务器体系结构。</p>
<p>13，VxWorks属于硬实时微内核操作系统。</p>
<p>14，用户必须在多任务调度启动以后再使能时钟节拍中断，一个任务或中断服务子程序可以通过事件控制块来向另外的任务法信号。</p>
<p>15，多数嵌入式系统具有时间约束性，因而至少是软实时系统，通用计算机系统像因特网域名服务系统也是典型的实时系统。</p>
<p>16，ucosII，允许中断嵌套，层数可达255层，不支持时间片轮转调度法。</p>
<p>17，硬件抽象层向操作系统内核提供了访问底层硬件的函数接口，简称HAL。</p>
<p> 1，我国高清电视分辨率大多为1920*1080，宽高比为16：9。</p>
<p>2，ADSL是利用电话线将计算机接入互联网，用户端需配置一个MODEM设备，计算机必须有以太网接口。</p>
<p>3，比较两个无符号数：CMP R5,R6　　若R5&lt;R6，进行逻辑与操作，结果放在R7，并要求更新程序状态寄存器的状态位：ANDCCS R7,R5,R6。</p>
<p>4，GPRS：通过分组无线服务技术是移动电话使用的一种移动数据业务，俗称2.5G。</p>
<p>5，中断延迟时间：从接受到可屏蔽中断请求信号到操作系统做出响应并转入中断服务程序所需要的最长时间。包括两部分：最长关中断（系统因执行临界区代码等原因不允许响应中断请求时间）</p>
<p>6，安卓系统分：内核，系统运行库，应用程序框架，应用。</p>
<p>7，引导加载程序。</p>
<p>8，微内核中：将进程间通信，任务管理，低级存储管理，中断处理，编译成一个精简的模块。</p>
<p>9，BSP板级支撑包，在内核与硬件之间。</p>
<p>10，处于运行状态的任务执行任务节拍延时函数，会转入挂起态，结束后进入就绪态。</p>
<p>11，每次任务完成所需时间的偏差称为抖动，响应时间：从时间请求到任务完成时间。</p>
<p>12，装入需要调试的可执行文件命令是file，终止当前被调试的命令：kill。</p>
<p>13，OSTaskCreate()，OSInit()。</p>
<p>14，禁止看门狗，禁止中断。</p>
<p> 1，数字信号处理器DSP特别适合音频和视频的传输。</p>
<p>2，局域网数据帧：发送设备MAC地址，接受地址设备MAC地址，校验信息。</p>
<p>3，当处理器处于用户模式时，如果没有异常发生是不能改变工作模式的。管理模式是操作系统的保护模式，不负责处理存储器故障。</p>
<p>4，看门狗（WDT）：在处理器进入错误状态后的一定时间内可使处理器复位。</p>
<p>5，DRAM是动态随机存取存储器。EEPROM是可电擦除可编程的只读存储器。</p>
<p>6，SPI，UART，GPIO挂载在外围总线上。</p>
<p>7，嵌入式系统的主存储器是指系统内存，包括内部SRAM和Flash和片外扩展DRAM和Flash。</p>
<p>8，IIC总线传输操作启动后，主器件传输的第一个字节是地址。当所有器件都不使用总线时，总线SCL和SDA线处于高电平。</p>
<p>9，USB采用半双工差分方式，有信号新4根，D+和D-是差分信号线，传输信号。</p>
<p>10，RS-232采用负逻辑传输，RS-485采用差分信号传输方式。</p>
<p>11，boot loader分为两个阶段，依赖CPU的体系结构的代码通常都放在阶段1，处理器内部的基本寄存器设置，时钟初始化在第一阶段，阶段2通常用C语言实现。</p>
<p>12，任务调度的三个条件：所有中断服务程序已经执行完毕，调度没有被禁止，任务就绪表中查找到最高任务优先级比当前运行的高。</p>
<p>13，自由软件不是免费软件，自由软件必定开方源码。</p>
<p>14，可以保护任务间的共享数据或支持任务间通信的是：消息邮箱，信号量，任务调度器上锁解锁，与，就绪表不算。</p>
<p>15，进入临界区要关闭中断，之后打开中断，任务切换所需要的时间取决于CPU有多少寄存器入栈，</p>
<p>16，ucosII 内核非常小，不包括文件系统。公开源码。</p>
<p>17，Linux，安卓是单内核</p>
<p>18，JTAG，无需目标存储器，不占用IO口，通过软件宿主机调试。</p>
<p>1，IP核中的IP是中文知识产权的英文缩写，目前SOC芯片中32位CPU大多数采用的是ARM内核。</p>
<p>2，数字有点电视采用的编码是MPEG-2，互联网视频中编码编码格式是H.264&#x2F;MPEG-4 AVC</p>
<p>3，计算机网络连接起来的遵循协议是TCP&#x2F;IP，关键设备是路由器。</p>
<p>4，软中断的指令助词符：SWI，用于断点中断指令助记符为BKPT。</p>
<p>5，冯诺依曼：3级流水线，哈佛结构：5级流水线。</p>
<p>6，使用末尾连锁连续中断需要消耗3个时钟周期，而普通中断需要32个时钟周期。</p>
<p>7，键盘分为线性和矩阵。</p>
<p>8，Linux操作系统遵从GNU计划下的通用公共许可协议，</p>
<p>9，用于无线传感器网络的操作系统：Tiny OS。</p>
<p>10，任务间通信机制有：信号量，互斥信号量，消息队列，消息邮箱</p>
<p>11，就绪态任务执行OSTaskDel函数之后进入休眠态。</p>
<p>12，处理时不可分割的代码称为临界区，系统调用宏OS_ENTER_CRITICAL()执行关中断操作。</p>
<p>13，任务等待键盘中断服务程序向其发送消息，则该任务转变为挂起态。</p>
<p>14，一个应用程序工程项目下，必须包含启动引导程序，应用程序文件。用OSStart()函数启动多任务调度。</p>
<p>15，命令没有指定输出文件名，则GCC生成一个a.out可执行文件，arm_linux_gcc</p>
<p>16，嵌入式实验最多的是Flash memory（闪存），RAM分为两类：静态和动态，SRAM，DRAM，都是易失性存储器</p>
<p>17，手机通信卫星通信无线局域网属于微波通信，广播属于短波超声波通信。</p>
<p>18，数据帧：发送设备MAC地址，接受设备，控制信息，有效载荷，控制信息。</p>
<p>19，F&#x3D;1，禁止快速中断，V&#x3D;1，表示结果溢出。</p>
<p>20，左移三位是之前的8倍。</p>
<p>21，系统总线：LCD控制器。中断控制器。JTAG，外围总线：定时器。</p>
<p>22，FRAM是一种非易事性存储器</p>
<p>23，外部存储器地址空间是1GB，IO与存储器采用统一编制方式，bank0只能实现16位32位总线宽度的访问。</p>
<p>24，RS-232不采用差分，RS-485采用差分。</p>
<p>25，安卓也属于嵌入式系统。</p>
<p>26，空闲任务永远不会处于挂起态。</p>
<p>27，QNX属于硬实时微内核。</p>
<p>28，多数嵌入式系统都具有时间约束性，然而并非嵌入式系统都是实时系统。</p>
<p>29，任务控制块包括任务的优先级，任务状态字，指向任务堆栈栈顶指针，不包括指向临界区的指针。</p>
<p>30，第一条指令一般会存储在固态存储设备ROM中</p>
<p>31，中断的嵌套层数为255层。</p>
<p>32，GCC过程：预处理，编译，汇编，连接。把源文件仅编译成目标文件，那么C语言编写的应用程序中可以不要main函数。</p>
<p>33，手机SOC大多采用32&#x2F;64位CPU内核。</p>
<p>34，灰度图的亮度等级总数是256中，真彩图像像素深度为24。</p>
<p>35，3G覆盖广，WiFi速度快。</p>
<p>36，D支持片上调试，嵌套向量NVIC，</p>
<p>37，BIC，非位清０操作，有１则清０.</p>
<p>38,输入缓冲,输出锁存.</p>
<p>39,NOR,NAND.</p>
<p>40,控制器局域网英文字母表是:CAN</p>
<p>41,RXDTXD,串口相反,SPI相同.</p>
<p>42,任务控制块OS_TCB的数据结构,任务切换时,被保护到任务的自用栈中.</p>
<p>43,VxWorks,所有与硬件相关的功能都集成在一个库中:BSP板级支持包.</p>
<p>44,对网络资源访问控制称为网络协议,对硬件支持,称为网络驱动程序.</p>
<p>45,嵌入式web服务器提供远程操控及配置设备.nGCS3的首地址0x18000000,2首地址时0x10000000</p>
<p>46,scatter　　Debug</p>
<p>1，集成电路的时钟频率达到10Ghz，几十纳米，晶体管已达数十亿，晶圆直径也已超过10英寸。</p>
<p>2，SOC四个阶段：总体设计，逻辑设计，综合与仿真，芯片制造。</p>
<p>3，AC-DC交流电转直流，DC-DC直流转直流。LDO（低压差稳压器）用于提供一种不随负载变化而变化的电源电压。</p>
<p>4，DMA可在外设和内存间进行传输，也可在内存内存之间进行传输。USB之类的外设，既可被内内核控制，也可以DMA控制。</p>
<p>5,NOR中:CE#&#x3D;0,OE#&#x3D;1,WE#&#x3D;0,BYTE#&#x3D;1(芯片使能,数据输出使能,写使能(0是使能.),8或者16位模式)</p>
<p>6,数据寄存器可以读取输入引脚的数据,也可以写数据到输出引脚.</p>
<p>7,实时操作系统具备:任务切换和中断延迟时间确认.</p>
<p>8,使用HAL会使系统开销有增大.</p>
<p>9,任务进入挂起态:OSTimesDly()函数,OSSemPend()函数.</p>
<p>10,处于运行态的任务不可能直接转入休眠态.</p>
<p>11,中断服务子程序一定完成调用OSIntEnter()或者对OSIntNesting变量加1.</p>
<p>12,中断级任务调度需满足的条件是:所有中断服务程序均已执行完毕.</p>
<p>13,用户必须在多任务调度启动以后再激活时钟节拍器.</p>
<p>14,中断服务程序只能发信号,不能等待信号.</p>
<p>15,A15采用哈佛结构,13级流水线.</p>
<p>16,MMU是所谓的虚拟存储器技术.</p>
<p>17,程序状态寄存器的值保存到R0的指令:MRS R0,CPSR</p>
<p>18,AMBA　　APB　　AHB　　VIC　　NVIC</p>
<p>19,IIC中”线与”结果使得SDA上电平为0.</p>
<p>20,有电阻的话,电压上拉到1,</p>
<p>21,GNU计划下的GPL.</p>
<p>22,ucosII中用于解决优先级反转的是互斥信号量,适合处理事件同步的是时间片轮转.</p>
<p>23,OSSchedLock()锁定调度器.</p>
<p>24,web组件:客户浏览器,web服务器,web页面,设备操控程序.需要通过CGI接口与设备程序进行交互.</p>
<p>25,JTAG用于芯片和电路板的硬件测试,TAP接口使用5根信号线.</p>
<p> 1，EPROM是紫外线可擦出可编程的只读存储器。</p>
<p> 2，无线电波主要是2.4GHz和5.8GHz两个频段。</p>
<p>3，51采用哈佛结构，ARM不是都采用哈佛ARM7采用冯诺依曼。</p>
<p>4，ARM公司把基于-A内核系列的处理器称为应用型处理器。</p>
<p>5，NVIC面向微控制器应用领域的-M系列。</p>
<p>6，PWM连接在外围总线上，USB连接在系统总线上。</p>
<p>7，片内数据存储器通常使用的是SRAM,程序存储器使用的是：Flash ROM。</p>
<p>8，USB主控制器在AHB，USB设备在外围总线上，USB通用串行总线。</p>
<p>9，复位后，除屏蔽寄存器初始值为1，其他都为0.</p>
<p>10，内核运行在单独的内核地址空间，每个用户子进程则使用自己的虚拟空间，</p>
<p>11,OSSemPost（）可以使任务进入就绪态</p>
<p>12，OSTaskDel()函数执行后，进入休眠态。</p>
<p>13，有足够 的内存空间保存当前任务的上下文不是任务调度的条件。</p>
<p>14，多个任务可以同时等待一个事件的发生。</p>
<p>15，JTAG采用串联起来的扫描链。</p>
<p>16，软件的主体是操作系统和应用软件。</p>
<p>17，视频编码：MPEG-4</p>
<p>18，以太网的通信协议：802.3，连接在以太网中的计算机必须具有一个全球唯一的MAC地址（物理硬件地址）</p>
<p>19，WIC：唤醒中断控制器。</p>
<p>20，引用一个标号：IMPORT Lable1 　　声明一个全局变量：EXTERN Lable2</p>
<p>21,数据域，校验域</p>
<p>22，串口时钟可以通过PCLK时钟进行分频获得，</p>
<p>23，低压稳压器：LDO</p>
<p>24,EOR是异或</p>
<p>25，嵌套向量控制器</p>
<p>26，HTML网页潜入CGI接口程序完成与 设备操控组件的信息交互。</p>
<p>27，0x2000　　0x1000</p>
<p>28，ARMv7A处理器的典型代表是Cortex-A系列，ARM11采用的是ARMv6的体系结构。</p>
<p>29，面向中低端，成本最低的是Cortex-M0。</p>
<p>30，thumb-2是ARMv7版本特有的，ARM9不具有。</p>
<p>31，内存的数据不发生改变。</p>
<p>32，TST按位与</p>
<p>33，CAN，RTC，SPI挂在系统总线上。</p>
<p>34，微硬盘存储器主要是：NAND Flash</p>
<p>35,USB均采用差分方式传输，半双工差分。</p>
<p>36，U-Boot可支持多种嵌入式CPU的BootLoader程序。</p>
<p>37，任务转入等待态：OSTimeDly()，OSSemPend()，等待态转入就绪态：OSSemPost()，</p>
<p>38，集成开发环境工具：项目管理器，文本编辑器，编译连接器。在线仿真器属于调试工具。</p>
<p>39，DSP：专用于声音图像处理的微处理器，SIMD：单指令多数据。</p>
<p>40，集成的电路每一年翻一番，是有名的摩尔定律，</p>
<p>41，Cortex-M0的专家处理器为：SC100，基于M3的为SC300</p>
<p>42，Cortex-M3采用3级流水线，cortex-R4采用8级流水线。</p>
<p>43，RSBS，后数减前数。</p>
<p>44，电源，时钟，复位电路。</p>
<p>45，AC-DC交流变直流，LDO低压差的稳压器。</p>
<p>46，UART起始位以逻辑0电平为标志，停止位以逻辑1电平为标志。</p>
<p>47，微软公司发布的嵌入式系统：WinCE.</p>
<p>48,VxWorks属于微内核。</p>
<p>49，实时系统不仅取决于功能正确性而且取决于时间正确性。</p>
<p>50，STR将前面的数传递到后面。</p>
<p>51，ucosII 使用OSQPend()函数等待获取信号，OSQPest()函数发送信号。</p>
<p>1，嵌入式系统的软件一般固化在只读存储器中，用户不能随意变更其中的程序功能。</p>
<p>2，GIF属于静态图像格式，APE是数字音乐压缩格式。</p>
<p>3，量化位数不是描述数字图像参数的。</p>
<p>4，字符描述方法：点阵法，轮廓法。UTF-8采用单字节可变长编码。</p>
<p>5，ARM特点：只使用加载存储指令访问内存，三地址指令格式</p>
<p>6，支持thumb-2的是-M和-R系列。指令宽16&#x2F;32位</p>
<p>7，SWI是异常中断类指令。</p>
<p>8，LDR是存储器到寄存器的传输，STR是寄存器到存储器的数据传输。‘</p>
<p>9，数据存储器：SRAM，程序存储器Flash ROM .</p>
<p>10.RTC的分频系数由时钟源决定，不能编程改变。</p>
<p>11，RS-485采用分差信号，RS-232负逻辑，单端输出方式。</p>
<p>12，大多数低端嵌入式不使用操作系统，所以生命周期长。</p>
<p>13，Free RTOS是一个迷你的实时操作系统内核，不属于类unix操作系统。</p>
<p>14，被中断的任务是不直接转入等待态的要先结束被中断态进入运行态。</p>
<p>15，WWW是典型的超文本结构，用于电子文档交换的文件格式名为：PDF。</p>
<p>16，电子设备，数据链路，通信协议，网络软件，每个网卡都有全球唯一的48位二进制MAC地址。</p>
<p>17，定义一个数据：Ｍｙｄａｔａ　ＤＣＤ　０ｘ３３４４５５６６　　无条件转移：B　MLOOP</p>
<p>18,除了操作系统,设备驱动,应用软件之外的系统软件是中间件..</p>
<p>19,低优先级转移到高优先级的时间:任务抢占时间.,中断延迟时间.(所需的最长时间)</p>
<p>20,两种方式的任务调度:任务级的任务调度,中断级的任务调度.</p>
<p>21,进入临界区,宏:OS_ENTER_CRITICAL,也可以调用函数OSSchedLock锁定人武器,取代关中断.</p>
<p>22,ucosII 可以使用OSSemPend等待一个信号量,挂起函数OST askSuspend</p>
<p>23,调试:发现错误并定位错误,调试工具控制程序代码的执行.</p>
<p>24,调试时使用命令watch观察程序中变量值.的</p>
<p>25,最小系统:时钟电路,晶振.通过改变脉冲信号的宽度,</p>
<p>1，图像水平分辨率<em>图像垂直分辨率</em>像素深度&#x2F;8，与量化位数采样率无关。</p>
<p>2，UTF-8单字节可变长，UTF-16双字节可变长</p>
<p>3，ARM9里面没有NVIC嵌套向量中断。</p>
<p>4，异常中断中：复位优先级最高，未定义的指令UND和软件中断SWI。</p>
<p>5，可以将指定位的值清零且不影响其他位的ARM指令是：AND和BIC。</p>
<p>6,采用DMA方式传输数据的时候不需要CPU的参与，降低了处理器的负荷，当处理器处于低功耗的状态时，可以通过DMA方式进行传输。</p>
<p>7,UART传送数据时，起始位为逻辑０标志，停止位以逻辑１为标志</p>
<p>8,S3C2410属于32位高档处理器.</p>
<p>9,IIC一种串行半双工传输总线标准,SCL是输出,SDA是双向输入输出.</p>
<p>10，MOV R1，R2,LSR#2</p>
<p>11,声明外部变量：extern,应用import</p>
<p>10,U-Boot被认为是功能全面,具有灵活性以及应用广泛的开方源码板级支持包.</p>
<p>11,不是所有嵌入式系统都自带标准设备驱动程序,如UCOS,设备驱动程序只能被高层软件调用,不能自行运行.</p>
<p>12,嵌入式系统有相当大的比例是实时系统,实时系统也有相当大比例是嵌入式系统.</p>
<p>13,Tiny OS主要应用于无线传感器网络.</p>
<p>14,eCos不是Linux的发行版.</p>
<p>15,任务调度时总是选择就绪态中优先级最高的.</p>
<p>16,OSTaskCreate基本型任务创建OSTaskCreateExit扩展性任务创建.</p>
<p>17,GCC是针对Linux操作系统环境下应用程序的编译工具.</p>
<p>18,指令集模拟器是在宿主机上模拟调试程序的,在线仿真器取代了被调试目标系统的CPU,</p>
<p>19.2.4GHz采用调频扩频技术,Bluetooth作为个人无线局域网协议的基础.</p>
<p>20,引导加载分两个:启动加载模式,下载模式.</p>
<p>21,安卓系统:Linux内核,系统运行库,应用程序框架,应用程序.</p>
<p>22,系统预定义的两个系统任务,低的空闲任务,高的统计任务.</p>
<p>23,UCOS任务三部分:程序代码,任务堆栈,任务控制块.</p>
<p>24,需求分析,系统设计,构件设计,系统集成测试.</p>
<p>25,只进行编译不进行连接-c,生成用于调试的符号表-g</p>
]]></content>
      <categories>
        <category>考试</category>
      </categories>
      <tags>
        <tag>计算机等级考</tag>
      </tags>
  </entry>
  <entry>
    <title>CP2：第一个工程——流水灯【基于STM32G431】</title>
    <url>/2024/10/04/CP2%EF%BC%9A%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94%E6%B5%81%E6%B0%B4%E7%81%AF%E3%80%90%E5%9F%BA%E4%BA%8ESTM32G431%E3%80%91/</url>
    <content><![CDATA[<h1 id="滑动变阻器可调速度的流水灯"><a href="#滑动变阻器可调速度的流水灯" class="headerlink" title="滑动变阻器可调速度的流水灯"></a>滑动变阻器可调速度的流水灯</h1><blockquote>
<p>本篇同样是实验报告的示例，所以首先采用报告形式书写，书写了一篇简单的报告，下一篇可见教程</p>
</blockquote>
<h2 id="一、方案设计"><a href="#一、方案设计" class="headerlink" title="一、方案设计"></a>一、方案设计</h2><p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/image-20241004203437596.png" alt="image-20241004203437596"></p>
<p>​	采用STM32G431作为主控，通过内置ADC模块对滑动变阻器上的分压值就行采集。然后将该电压值归一化为速度百分比，通过该电压值调节流水灯的速度值。并且通过GPIO控制LED灯依次点亮，形成流水灯，并且利用HAL库的延时函数控制流水灯速度。</p>
<h2 id="二、电路图设计及参数设计"><a href="#二、电路图设计及参数设计" class="headerlink" title="二、电路图设计及参数设计"></a>二、电路图设计及参数设计</h2><h3 id="ADC控制电路"><a href="#ADC控制电路" class="headerlink" title="ADC控制电路"></a>ADC控制电路</h3><p>​	如图，用ADC采集电阻的分压值，这样在改变滑动变阻器阻值时即可通过采集变化的电压值，从而设置流水灯延迟时间，实现改变流水灯速度。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/image-20241004210546003.png" alt="image-20241004210546003"></p>
<h3 id="GPIO流水灯电路"><a href="#GPIO流水灯电路" class="headerlink" title="GPIO流水灯电路"></a>GPIO流水灯电路</h3><p>​	如图所示，采用GPIO驱动LED灯，当IO口输出为高电平时，二极管导通，发光。所以控制二极管导通的时间，以及导通的顺序，即可实现不同速度的流水灯。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/image-20241004210201092.png" alt="image-20241004210201092"></p>
<h2 id="三、代码设计"><a href="#三、代码设计" class="headerlink" title="三、代码设计"></a>三、代码设计</h2><h4 id="1-在CubeMX进行如下配置"><a href="#1-在CubeMX进行如下配置" class="headerlink" title="1. 在CubeMX进行如下配置"></a>1. 在CubeMX进行如下配置</h4><p>​	配置时钟树，Debug，GPIO和ADC模块。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/image-20241004211136962.png" alt="image-20241004211136962"></p>
<h4 id="2-工程编写"><a href="#2-工程编写" class="headerlink" title="2. 工程编写"></a>2. 工程编写</h4><p>首先定义函数，实现ADC采样电压值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint32_t</span> adc_num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">GetADC_Value</span><span class="params">( ADC_HandleTypeDef *hadc)</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> adc;</span><br><span class="line">	 </span><br><span class="line">    HAL_ADC_Start(hadc);</span><br><span class="line">	adc=  HAL_ADC_GetValue(hadc);</span><br><span class="line">    <span class="keyword">return</span> adc ;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后，在<code>main.c</code>中编写控制代码，通过采集到的电压值，改变delay时间，从而实现速度的改变</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* MCU Configuration--------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span></span><br><span class="line">  HAL_Init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Configure the system clock */</span></span><br><span class="line">  SystemClock_Config();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN SysInit */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END SysInit */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize all configured peripherals */</span></span><br><span class="line">  MX_GPIO_Init();</span><br><span class="line">  MX_ADC2_Init();</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">  <span class="type">uint16_t</span> dsled = <span class="number">0x0100</span>;</span><br><span class="line">  <span class="type">uint32_t</span> adc_num = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Infinite loop */</span></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);    <span class="comment">//打开锁存器</span></span><br><span class="line">	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_All, GPIO_PIN_SET);  <span class="comment">//灭掉所有的LED</span></span><br><span class="line">	dsled = dsled &lt;&lt; <span class="number">1</span>;</span><br><span class="line">	HAL_GPIO_WritePin(GPIOC, dsled, GPIO_PIN_RESET);    <span class="comment">//选择特定的LED亮起</span></span><br><span class="line">	<span class="keyword">if</span>(dsled == <span class="number">0x8000</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		dsled = <span class="number">0x0080</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	HAL_Delay( <span class="number">1.0</span>*(<span class="number">1.0</span>*GetADC_Value(&amp;hadc2)*<span class="number">3.3f</span>/<span class="number">4095.0f</span>) *<span class="number">1000</span> + <span class="number">100</span>);	   </span><br><span class="line">	  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END 3 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h3><p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/image-20241004211710024.png" alt="image-20241004211710024"></p>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>​	本次实验，熟悉了GPIO和ADC模块的配置和应用。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>STI</tag>
      </tags>
  </entry>
  <entry>
    <title>CP2：第一个工程——流水灯教程</title>
    <url>/2024/10/04/CP2%EF%BC%9A%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94%E6%B5%81%E6%B0%B4%E7%81%AF%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="新建工程："><a href="#新建工程：" class="headerlink" title="新建工程："></a>新建工程：</h2><p>​    点开来是这样的</p>
<p>​    这里选择file来点击new project 或者选择 ACCESS TO MCU SELECTOR都可以。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/6b6f0a5be8754f718ab2db14cc92c26b.png" alt="img"></p>
<p>进来后，先在左上角commerical part number（商业零件号）先填写型号搜寻，再点击对应型号（这里以STM32G431举例），再按右上角的start project</p>
<p><img src="https://i-blog.csdnimg.cn/direct/55bccc1eeeb24f52810d6b1ccc9dafb3.png" alt="img"></p>
<p>进去后就进行图形化配置界面了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/image-20241004212934977.png" alt="image-20241004212934977"></p>
<h2 id="RCC时钟源"><a href="#RCC时钟源" class="headerlink" title="RCC时钟源"></a>RCC时钟源</h2><p>此时，时钟源选择外部晶振</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/image-20241004212707981.png" alt="image-20241004212707981"></p>
<h2 id="时钟树"><a href="#时钟树" class="headerlink" title="时钟树"></a>时钟树</h2><p>然后，就像人需要时钟去控制行为一样。单片机的每一个动作都需要在统一的时钟节拍之下。</p>
<p>时钟树的配置，就是确定所用时钟。</p>
<p>初学者如图配置即可，可先不探究原因。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/image-20241004212834165.png" alt="image-20241004212834165"></p>
<h2 id="调试接口"><a href="#调试接口" class="headerlink" title="调试接口"></a>调试接口</h2><p>然后点击左边列表的sys,选择仿真器，这里我用的是stlink，我就直接选择第二个了。</p>
<blockquote>
<p>notice:这里一定要使能仿真器接口。不使能的话，首次烧写程序后下次无法连接！</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/665f80e29de64bfe8a9e8dc59a829153.png" alt="img"></p>
<h2 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h2><p>既然要点亮led，那就要gpio<strong>输出</strong>高低电平去控制灯的亮灭，那我们就在这个对应引脚上选择输出模式。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/e3bc25438f2844ffa9258fc31906eae5.png" alt="img"></p>
<p>然后点击左边的system core选择里面的GPIO，然后对应配置好初始输出电平为低电平（因为流水灯最开始是全灭状态），再改成推挽模式，再把输出速度调至最快。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/e050ba40bd8a45558be27fe6d6a2dab9.png" alt="img"></p>
<h2 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h2><p>在<strong>project manager</strong>选项卡中 project选项编辑工程名，工程位置，在toolchain&#x2F;IDE中选择手使用的IDE工具，此处选择MDK。使用固件版本可以选择也可以使用默认最新版本。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/3da13ebc37054f12bcd3272e5510ffc6.png" alt="img"></p>
<p>在code generator选项中选择copy only the necessary library files，选择generated files中选项，如图所示。</p>
<p>选择勾选的选项</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/3d5fc5849d244f23bd77236eca69cf1b.png" alt="img"></p>
<p>点击生成代码，会弹出弹窗，点击open project会自动打卡MDK软件，至此完成了使用CUBEMX到MDK5的移植。</p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/765b1d915ea944e5aab5aa3ccc6569b3.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/2bfcdcface50418e85e9faa356a7a82b.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/SHR-sky/Picture@main/Pic/9516a881fbb4424d9707858811ddf7bd.png" alt="img"></p>
<p>这个时候再点进open project，即可进入keil，开始编写代码了。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>STI</tag>
      </tags>
  </entry>
</search>
